#!/usr/bin/env python3.11

from pytm import TM, Actor, Dataflow, Datastore, Process, Boundary

# Initialize the Threat Model
tm = TM("Bitcoin Ecosystem Threat Model")

# Define Actors

# Define Trust Boundaries
user_wallet_provider_tb = Boundary("User-Wallet Provider Trust Boundary")
user_miner_tb = Boundary("User-Miner Trust Boundary")
user_exchange_tb = Boundary("User-Exchange Trust Boundary")
node_miner_tb = Boundary("Node-Miner Trust Boundary")
node_node_tb = Boundary("Node-Node Trust Boundary")
developer_community_tb = Boundary("Developer-Community Trust Boundary")

user = Actor("User", inBoundary=["user_wallet_provider_tb", "user_miner_tb", "user_exchange_tb"])
wallet_provider = Actor("Wallet Provider")
miner = Actor("Miner")
full_node = Actor("Full Node")
exchange = Actor("Exchange")
developer = Actor("Developer")

# Define Processes
create_wallet = Process("Create Wallet")
send_bitcoin = Process("Send Bitcoin")
receive_bitcoin = Process("Receive Bitcoin")
manage_funds = Process("Manage Funds")
develop_wallet = Process("Develop Wallet")
maintain_wallet = Process("Maintain Wallet")
support_wallet = Process("Support Wallet")
validate_transactions = Process("Validate Transactions")
create_block = Process("Create Block")
verify_transactions = Process("Verify Transactions")
relay_transactions = Process("Relay Transactions")
verify_block = Process("Verify Block")
relay_block = Process("Relay Block")
create_account = Process("Create Account")
manage_exchange_transactions = Process("Manage Exchange Transactions")
submit_code_changes = Process("Submit Code Changes")
review_code_changes = Process("Review Code Changes")
test_features = Process("Test Features")
gather_feedback = Process("Gather Feedback")

# Define Dataflows
Dataflow(user, create_wallet, "Create Wallet Request")
Dataflow(create_wallet, wallet_provider, "Wallet Creation Request")
Dataflow(wallet_provider, create_wallet, "Wallet Created")
Dataflow(user, send_bitcoin, "Send Bitcoin Request")
Dataflow(send_bitcoin, wallet_provider, "Send Bitcoin Request")
Dataflow(wallet_provider, full_node, "Transaction Data")
Dataflow(full_node, verify_transactions, "Transaction Data")
Dataflow(verify_transactions, full_node, "Transaction Verification Result")
Dataflow(full_node, relay_transactions, "Transaction Data")
Dataflow(relay_transactions, miner, "Transaction Data")
Dataflow(miner, validate_transactions, "Transaction Data")
Dataflow(validate_transactions, miner, "Transaction Validation Result")
Dataflow(miner, create_block, "Transaction Data")
Dataflow(create_block, miner, "Block Created")
Dataflow(miner, full_node, "Block Data")
Dataflow(full_node, verify_block, "Block Data")
Dataflow(verify_block, full_node, "Block Verification Result")
Dataflow(full_node, relay_block, "Block Data")
Dataflow(relay_block, full_node, "Block Data")
Dataflow(user, receive_bitcoin, "Receive Bitcoin Request")
Dataflow(receive_bitcoin, wallet_provider, "Receive Bitcoin Request")
Dataflow(wallet_provider, user, "Bitcoin Received")
Dataflow(user, manage_funds, "Manage Funds Request")
Dataflow(manage_funds, wallet_provider, "Manage Funds Request")
Dataflow(wallet_provider, user, "Funds Managed")
Dataflow(wallet_provider, develop_wallet, "Develop Wallet Request")
Dataflow(develop_wallet, wallet_provider, "Wallet Developed")
Dataflow(wallet_provider, maintain_wallet, "Maintain Wallet Request")
Dataflow(maintain_wallet, wallet_provider, "Wallet Maintained")
Dataflow(wallet_provider, support_wallet, "Support Wallet Request")
Dataflow(support_wallet, wallet_provider, "Support Provided")
Dataflow(user, create_account, "Create Account Request")
Dataflow(create_account, exchange, "Account Creation Request")
Dataflow(exchange, create_account, "Account Created")
Dataflow(user, manage_exchange_transactions, "Manage Exchange Transactions Request")
Dataflow(manage_exchange_transactions, exchange, "Transaction Management Request")
Dataflow(exchange, full_node, "Transaction Data")
Dataflow(full_node, verify_transactions, "Transaction Data")
Dataflow(verify_transactions, full_node, "Transaction Verification Result")
Dataflow(full_node, relay_transactions, "Transaction Data")
Dataflow(relay_transactions, exchange, "Transaction Data")
Dataflow(exchange, user, "Transaction Managed")
Dataflow(developer, submit_code_changes, "Code Changes Submission")
Dataflow(submit_code_changes, developer_community_tb, "Code Changes Submitted")
Dataflow(developer_community_tb, review_code_changes, "Code Changes Review Request")
Dataflow(review_code_changes, developer_community_tb, "Code Changes Reviewed")
Dataflow(developer_community_tb, developer, "Code Changes Approved")
Dataflow(developer, test_features, "Test Features Request")
Dataflow(test_features, full_node, "Feature Testing Request")
Dataflow(full_node, test_features, "Feature Testing Result")
Dataflow(test_features, developer, "Features Tested")
Dataflow(developer, gather_feedback, "Gather Feedback Request")
Dataflow(gather_feedback, user, "Feedback Request")
Dataflow(user, gather_feedback, "Feedback Provided")
Dataflow(gather_feedback, developer, "Feedback Received")

# Generate the threat model
tm.process()
